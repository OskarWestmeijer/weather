openapi: "3.0.3"
servers:
  - url: https://api.oskar-westmeijer.com
    description: url of production environment
info:
  description: |
    # Introduction
    This Api provides Weather data for predefined locations. The data is harvested every minute
    from [https://openweathermap.org/](https://openweathermap.org/) and stored in a database.
    
    It serves as a personal hobby project. The goal is to investigate and practice Api-design with Spring-Boot.
    The OpenApi specification is documented with Redoc. [https://api.oskar-westmeijer.com](https://api.oskar-westmeijer.com)
    
    In addition, a ReactJs frontend is available. It displays the weather data in charts over
    time. [https://ui.oskar-westmeijer.com](https://ui.oskar-westmeijer.com)
  version: 1.0.0
  title: Weather-Api
externalDocs:
  description: https://github.com/OskarWestmeijer/weather-api
  url: 'https://github.com/OskarWestmeijer/weather-api'
tags:
  - name: locations_resource
    x-displayName: locations
    description: Available locations for weather requests.
  - name: weather_resource
    x-displayName: weather
    description: Weather for a location.

  - name: location_dto
    x-displayName: LocationElement
    description: |
      Element of the LocationResponse
      <SchemaDefinition schemaRef="#/components/schemas/LocationDto" />
  - name: location_response
    x-displayName: LocationResponse
    description: |
      Container for multiple location elements
      <SchemaDefinition schemaRef="#/components/schemas/LocationResponse" />

  - name: weather_dto
    x-displayName: WeatherElement
    description: |
      Element of the WeatherResponse
      <SchemaDefinition schemaRef="#/components/schemas/WeatherDto" />
  - name: weather_response
    x-displayName: WeatherResponse
    description: |
      Container for multiple weather elements
      <SchemaDefinition schemaRef="#/components/schemas/WeatherResponse" />

x-tagGroups:
  - name: Resources
    tags:
      - locations_resource
      - weather_resource
  - name: Response Models
    tags:
      - location_response
      - weather_response
  - name: Response elements
    tags:
      - location_dto
      - weather_dto
paths:
  /locations:
    get:
      summary: Get all locations
      operationId: getLocations
      tags:
        - locations_resource
      responses:
        '200':
          description: Request Weather for these locations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationResponse"

  /weather/{localZipCode}/3d:
    get:
      summary: Get weather of last 3 days for location
      operationId: getWeatherLast3Days
      tags:
        - weather_resource
      parameters:
        - name: localZipCode
          in: path
          required: true
          description: localZipCode of location
          schema:
            type: string
            example: "20095"
      responses:
        '200':
          description: Weather results for the location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeatherResponse"

  /weather/{localZipCode}/24h:
    get:
      summary: Get weather of last 24 hours for location
      operationId: getWeatherLast24Hours
      tags:
        - weather_resource
      parameters:
        - name: localZipCode
          in: path
          required: true
          description: localZipCode of location
          schema:
            type: string
            example: "20095"
      responses:
        '200':
          description: Weather results for the location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeatherResponse"

components:
  schemas:
    LocationDto:
      type: object
      description: Requestable location
      required:
        - uuid
        - localZipCode
        - locationCode
        - cityName
        - country
        - countryCode
        - lastImportAt
      properties:
        uuid:
          type: string
          format: uuid
          description: request weather for a location with this technical id
          example: "eac4f85d-c683-4a9c-91e3-a4d3b0b91a04"
        localZipCode:
          type: string
          description: national postal code, to be considered in combination with 'countryCode'
          example: "20095"
        locationCode:
          type: string
          description: deprecated, replaced by uuid
          example: "2911298"
        cityName:
          type: string
          description: city name in countries local spelling
          example: "Hamburg"
        country:
          type: string
          description: deprecated, replaced by countryCode
          example: "Germany"
        countryCode:
          type: string
          description: ISO 3166-1 ALPHA-3 codes
          example: "GER"
        lastImportAt:
          type: string
          format: date-time
          description: UTC
          example: "2022-08-29T21:56:18.602546Z"
    Locations:
      type: array
      items:
        $ref: "#/components/schemas/LocationDto"

    LocationResponse:
      type: object
      description: Container for multiple location elements.
      required:
        - locations
      properties:
        locations:
          type: array
          items:
            $ref: "#/components/schemas/LocationDto"

    WeatherResponse:
      type: object
      description: Weather results for a location.
      required:
        - cityName
        - localZipCode
        - country
        - weatherData
      properties:
        cityName:
          type: string
          example: "Hamburg"
        localZipCode:
          type: string
          example: "20095"
        country:
          type: string
          example: "Germany"
        weatherData:
          type: array
          items:
            $ref: "#/components/schemas/WeatherDto"

    WeatherDto:
      type: object
      description: Weather at recorded time. Wrapped in WeatherResponse, with location information.
      required:
        - temperature
        - humidity
        - windSpeed
        - recordedAt
      properties:
        temperature:
          type: number
          format: double
          example: "11.45"
        humidity:
          type: integer
          format: int32
          example: "55"
        windSpeed:
          type: number
          format: double
          example: "2.57"
        recordedAt:
          type: string
          format: date-time
          example: "2022-08-29T21:56:18.602546Z"
