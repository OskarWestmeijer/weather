openapi: "3.0.3"
servers:
  - url: https://api.oskar-westmeijer.com/api/v1
    description: url of production environment
info:
  description: |
    # Introduction
    This Api provides Weather data for predetermined locations. The data is harvested every minute from [https://openweathermap.org/](https://openweathermap.org/).
    
    The application serves as a personal hobby project. The goal is to investigate and practice Api-design with Spring-Boot.
    In addition a ReactJs frontend is available. It displays the weather data in charts over time. [https://ui.oskar-westmeijer.com](https://ui.oskar-westmeijer.com)
    
    This project has no commercial intentions and is free to access for everyone.
  version: 1.0.0
  title: Weather-Api
externalDocs:
  description: https://github.com/OskarWestmeijer/weather-api
  url: 'https://github.com/OskarWestmeijer/weather-api'
tags:
  - name: locations
    description: Request Weather for these locations.
  - name: location_dto
    x-displayName: The Location Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/LocationDto" />
x-tagGroups:
  - name: Resources
    tags:
      - locations
  - name: Response Models
    tags:
      - location_dto
paths:
  /locations:
    get:
      summary: Get all locations
      operationId: getLocations
      tags:
        - locations
      responses:
        '200':
          description: Request Weather for these locations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locations"
components:
  schemas:
    LocationDto:
      type: object
      description: Describes unique location
      required:
        - localZipCode
        - locationCode
        - cityName
        - country
        - lastImportAt
      properties:
        localZipCode:
          type: string
          example: "20095"
        locationCode:
          type: string
          example: "2911298"
        cityName:
          type: string
          example: "Hamburg"
        country:
          type: string
          example: "Germany"
        lastImportAt:
          type: string
          format: date-time
          example: "2022-08-29T21:56:18.602546Z"
    Locations:
      type: array
      items:
        $ref: "#/components/schemas/LocationDto"
    WeatherResponse:
      type: object
      description: Weather results for a location.
      required:
        - cityName
        - localZipCode
        - country
        - weatherData
      properties:
        cityName:
          type: string
          example: "Hamburg"
        localZipCode:
          type: string
          example: "20095"
        country:
          type: string
          example: "Germany"
        weatherData:
          type: array
          items:
            $ref: "#/components/schemas/WeatherDto"
    WeatherDto:
      type: object
      description: Weather at recorded time. Wrapped in WeatherResponse, with location information.
      required:
        - temperature
        - humidity
        - windSpeed
        - recordedAt
      properties:
        temperature:
          type: number
          format: double
          example: "11.45"
        humidity:
          type: integer
          format: int32
          example: "55"
        windSpeed:
          type: number
          format: double
          example: "2.57"
        recordedAt:
          type: string
          format: date-time
          example: "2022-08-29T21:56:18.602546Z"
